<?xml version="1.0" encoding="UTF-8" ?>
<configuration debug="true">

	<logger name="org.apache.kafka" level="WARN" />

	<!-- 콘솔에 로그 출력 -->
	<appender name="CONSOLE"
		class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{36} -
				%msg%n</pattern>
		</encoder>
	</appender>

	<!-- CustomDBAppender: 데이터베이스에 로그 저장 -->
	<appender name="CUSTOM_DB"
		class="com.example.neobns.logging.common.CustomDBAppender">
		<!-- 필터 설정 -->
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator>
				<!-- <expression> return (mdc.get("requestId") != null) &amp;&amp; !((String) 
					mdc.get("className")).contains("prometheus"); </expression> -->
				<expression>
					return (mdc.get("requestId") != null) &amp;&amp;
					(mdc.get("className") == null || !((String)
					mdc.get("className")).contains("prometheus"));
				</expression>
			</evaluator>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>

		<!-- 데이터베이스 연결 설정 -->
		<connectionSource
			class="ch.qos.logback.core.db.DriverManagerConnectionSource">
			<driverClass>org.mariadb.jdbc.Driver</driverClass>
			<url>jdbc:mariadb://neobns.com:13306/db2</url>
			<user>POC_USER</user>
			<password>neobns1!</password>
		</connectionSource>
	</appender>

	<!-- 모든 로그를 저장하는 파일 어펜더 -->
	<appender name="FILE"
		class="com.example.neobns.logging.common.CustomFileAppender">
		<!-- 로그를 저장할 파일 경로 -->
		<file>../logs/application.log</file> <!-- 로그가 저장될 파일 경로 설정 -->

		<!-- 필터 설정 (DB와 동일) -->
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator>
				<expression>
					return (mdc.get("requestId") != null) &amp;&amp;
					!((String) mdc.get("className")).contains("prometheus");
				</expression>
			</evaluator>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>

		<!-- 로그 형식 설정 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}; %logger{}; %level{};
				%X{className}; %X{methodName}; %X{requestId}; %X{userId};
				%X{clientIp}; %X{userAgent}; %X{executeResult}; %X{queryLog};
				%X{requestUri}%n</pattern> <!-- 로그의 날짜 및 메시지 포맷 -->
		</encoder>
	</appender>

	<!-- SQL 로그를 저장하는 파일 어펜더 -->
	<appender name="FILE_PERFROM_SQL"
		class="ch.qos.logback.core.FileAppender">
		<!-- 로그를 저장할 파일 경로 -->
		<file>../logs/quickstart-perform-sql.log</file> <!-- 로그가 저장될 파일 경로 설정 -->

		<!-- MDC의 callerclass가 SQL이면 perform-sql에 저장되도록 설정 -->
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator>
				<expression>
					return (mdc.get("requestId")) != null &amp;&amp;
					(mdc.get("className") != null) &amp;&amp;
					((String)
					mdc.get("className")).equals("SQL") &amp;&amp;
					(logger.equals("TRACE") || logger.equals("SLOW")) &amp;&amp;
					(mdc.get("executeResult") != null);
				</expression>
			</evaluator>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>

		<!-- 로그 형식 설정 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}; %logger{}; %level{};
				%X{className}; %X{methodName}; %X{requestId}; %X{userId};
				%X{clientIp}; %X{userAgent}; %X{executeResult}; %X{queryLog};
				%X{requestUri} %n</pattern> <!-- 로그의 날짜 및 메시지 포맷 -->
		</encoder>
	</appender>

	<!-- SQL ERROR 로그를 저장하는 파일 어펜더 -->
	<appender name="FILE_ERROR_SQL"
		class="ch.qos.logback.core.FileAppender">
		<!-- 로그를 저장할 파일 경로 -->
		<file>../logs/quickstart-error-sql.log</file> <!-- 로그가 저장될 파일 경로 설정 -->

		<!-- MDC의 callerClass가 SQL이고 callerMethod에 ${ 패턴이 포함되어 있으면 error-dynamic-sql.log에 
			저장되도록 설정 -->
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator>
				<expression>
					return (mdc.get("requestId") != null) &amp;&amp;
					(mdc.get("className") != null) &amp;&amp;
					((String)
					mdc.get("className")).equals("SQL") &amp;&amp;
					logger.equals("ERROR") &amp;&amp;
					(mdc.get("executeResult") !=
					null);
				</expression>
			</evaluator>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>

		<!-- 로그 형식 설정 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}; %logger{}; %level{};
				%X{className}; %X{methodName}; %X{requestId}; %X{userId};
				%X{clientIp}; %X{userAgent}; %X{executeResult}; %X{queryLog};
				%X{requestUri} %n</pattern> <!-- 로그의 날짜 및 메시지 포맷 -->
		</encoder>
	</appender>

	<!-- SQL Dynamic ERROR 로그를 저장하는 파일 어펜더 -->
	<appender name="FILE_ERROR_DYNAMIC_SQL"
		class="ch.qos.logback.core.FileAppender">
		<!-- 로그를 저장할 파일 경로 -->
		<file>../logs/quickstart-error-dynamic-sql.log</file> <!-- 로그가 저장될 파일 경로 설정 -->

		<!-- MDC의 callerClass가 SQL이고 callerMethod에 ${ 패턴이 포함되어 있으면 error-dynamic-sql.log에 
			저장되도록 설정 -->
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator>
				<expression>
					return mdc.get("requestId") != null &amp;&amp;
					mdc.get("className") != null &amp;&amp;
					((String)
					mdc.get("className")).equals("SQL") &amp;&amp;
					logger.equals("ERROR") &amp;&amp;
					mdc.get("executeResult") != null
					&amp;&amp;
					mdc.get("methodName") != null &amp;&amp;
					((String)
					mdc.get("methodName")).contains("$");
				</expression>
			</evaluator>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>

		<!-- 로그 형식 설정 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}; %logger{}; %level{};
				%X{className}; %X{methodName}; %X{requestId}; %X{userId};
				%X{clientIp}; %X{userAgent}; %X{executeResult}; %X{queryLog};
				%X{requestUri} %n</pattern> <!-- 로그의 날짜 및 메시지 포맷 -->
		</encoder>
	</appender>

	<!-- AOP ERROR 로그를 저장하는 파일 어펜더 -->
	<appender name="FILE_ERROR_AOP"
		class="ch.qos.logback.core.FileAppender">
		<!-- 로그를 저장할 파일 경로 -->
		<file>../logs/quickstart-error-aop.log</file> <!-- 로그가 저장될 파일 경로 설정 -->

		<!-- logger 이름이 ERROR이고 MDC의 callerclass가 SQL이 아니면 저장하도록 설정 -->
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator>
				<expression>
					return mdc.get("requestId") != null &amp;&amp;
					logger.equals("ERROR") &amp;&amp;
					mdc.get("className") != null
					&amp;&amp;
					!((String) mdc.get("className")).contains("prometheus")
					&amp;&amp;
					!((String) mdc.get("className")).equals("SQL");
				</expression>
			</evaluator>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>

		<!-- 로그 형식 설정 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}; %logger{}; %level{};
				%X{className}; %X{methodName}; %X{requestId}; %X{userId};
				%X{clientIp}; %X{userAgent}; %X{executeResult}; %X{queryLog};
				%X{requestUri} %n</pattern> <!-- 로그의 날짜 및 메시지 포맷 -->
		</encoder>
	</appender>

	<!-- 성능(소요시간) 로그를 저장하는 파일 어펜더 -->
	<appender name="FILE_PERFORM_AOP"
		class="ch.qos.logback.core.FileAppender">
		<!-- 로그를 저장할 파일 경로 -->
		<file>../logs/quickstart-perform-aop.log</file> <!-- 로그가 저장될 파일 경로 설정 -->

		<!-- MDC의 callerclass가 SQL이면 sql.log에 저장되도록 설정 -->
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">
			<evaluator>
				<expression>
					return mdc.get("requestId") != null &amp;&amp;
					(logger.equals("TRACE") || logger.equals("SLOW")) &amp;&amp;
					mdc.get("executeResult") != null &amp;&amp;
					mdc.get("className") !=
					null &amp;&amp;
					!((String)
					mdc.get("className")).contains("prometheus") &amp;&amp;
					!((String)
					mdc.get("className")).equals("SQL");
				</expression>
			</evaluator>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>

		<!-- 로그 형식 설정 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}; %logger{}; %level{};
				%X{className}; %X{methodName}; %X{requestId}; %X{userId};
				%X{clientIp}; %X{userAgent}; %X{executeResult}; %X{queryLog};
				%X{requestUri} %n</pattern> <!-- 로그의 날짜 및 메시지 포맷 -->
		</encoder>
	</appender>

	<!-- db appender async 처리 -->
	<appender name="ASYNC_DB"
		class="ch.qos.logback.classic.AsyncAppender">
		<queueSize>1000</queueSize>
		<maxFlushTime>2000</maxFlushTime>
		<includeCallerData>true</includeCallerData>
		<appender-ref ref="CUSTOM_DB" />
	</appender>

	<!-- file appender async 처리 -->
	<appender name="ASYNC_FILE"
		class="ch.qos.logback.classic.AsyncAppender">
		<appender-ref ref="FILE" />
	</appender>

	<!-- 루트 로거 -->
	<root level="INFO">
		<appender-ref ref="CONSOLE" />

		<!-- sync db appender -->
		<!-- <appender-ref ref="CUSTOM_DB" /> -->

		<!-- async db appender -->
		<!-- <appender-ref ref="ASYNC_DB" /> -->

		<!-- sync file appender -->
		<appender-ref ref="FILE" />

		<!-- async file appender -->
		<!-- <appender-ref ref="ASYNC_FILE" /> -->

<!-- 		<appender-ref ref="FILE_PERFROM_SQL" />
		<appender-ref ref="FILE_ERROR_SQL" />
		<appender-ref ref="FILE_ERROR_DYNAMIC_SQL" />
		<appender-ref ref="FILE_ERROR_AOP" />
		<appender-ref ref="FILE_PERFORM_AOP" /> -->
	</root>
</configuration>